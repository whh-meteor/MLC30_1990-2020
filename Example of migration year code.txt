var table: Table users/Myanmar
var table: Table users/value2018

function cloudMaskL8(image) {
  var cloudShadowBitMask = 1 << 3;  
  var cloudsBitMask = 1 << 5;
  var qa = image.select('pixel_qa');   
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0).and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  return image.updateMask(mask);}

function L8_ndvi(image){
  return image.addBands(image.normalizedDifference(['B5', 'B4']).rename("NDVI"));
}

function L8_ndwi(image){
  return image.addBands(image.normalizedDifference(['B3', 'B5']).rename('NDWI'));
} 

function L8_ndbi(image){
  return image.addBands(image.normalizedDifference(['B6', 'B5']).rename('NDBI'));
} 

function L8_rvi(image){
      
        var rvi = image.expression('NIR / Red', {
        'NIR': image.select('B5'),
        'Red': image.select('B4')
        }).float();
        return image.addBands(rvi.rename('RVI'));
    }

function L8_evi(image){
      var evi = image.expression('2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {
    'NIR' : image.select('B5'),
    'RED' : image.select('B4'),
    'BLUE': image.select('B2')
  }).float();
  return image.addBands(evi.rename('EVI'));
}

// function L8_glcm(image,j){
//   var iv = image.select('B1','B2','B3','B4','B5','B6','B7','NDVI','NDWI','NDBI','EVI','RVI').toUint16();
//   var glcm = iv.glcmTexture({size: 3});
//   return image.addBands(glcm.rename(j+'glcm'));
// }


function Band_rename(image,j){
  return image.select(
    ['B1','B2','B3','B4','B5','B6','B7','NDVI','NDWI','NDBI','EVI','RVI',
    'B1_contrast','B2_contrast','B3_contrast','B4_contrast','B5_contrast','B6_contrast','B7_contrast','NDVI_contrast','NDBI_contrast','NDWI_contrast','RVI_contrast','EVI_contrast',
    'B1_ent','B2_ent','B3_ent','B4_ent','B5_ent','B6_ent','B7_ent','NDVI_ent','NDBI_ent','NDWI_ent','EVI_ent','RVI_ent',
    'B1_corr','B2_corr','B3_corr','B4_corr','B5_corr','B6_corr','B7_corr','NDVI_corr','NDBI_corr','NDWI_corr','EVI_corr','RVI_corr',
    'B1_diss','B2_diss','B3_diss','B4_diss','B5_diss','B6_diss','B7_diss','NDVI_diss','NDBI_diss','NDWI_diss','EVI_diss','RVI_diss'],
    [j+'B1',j+'B2',j+'B3',j+'B4',j+'B5',j+'B6',j+'B7',j+'NDVI',j+'NDWI',j+'NDBI',j+'EVI',j+'RVI',
    j+'B1_contrast',j+'B2_contrast',j+'B3_contrast',j+'B4_contrast',j+'B5_contrast',j+'B6_contrast',j+'B7_contrast',j+'NDVI_contrast',j+'NDBI_contrast',j+'NDWI_contrast',j+'RVI_contrast',j+'EVI_contrast',
    j+'B1_ent',j+'B2_ent',j+'B3_ent',j+'B4_ent',j+'B5_ent',j+'B6_ent',j+'B7_ent',j+'NDVI_ent',j+'NDBI_ent',j+'NDWI_ent',j+'EVI_ent',j+'RVI_ent',
    j+'B1_corr',j+'B2_corr',j+'B3_corr',j+'B4_corr',j+'B5_corr',j+'B6_corr',j+'B7_corr',j+'NDVI_corr',j+'NDBI_corr',j+'NDWI_corr',j+'EVI_corr',j+'RVI_corr',
    j+'B1_diss',j+'B2_diss',j+'B3_diss',j+'B4_diss',j+'B5_diss',j+'B6_diss',j+'B7_diss',j+'NDVI_diss',j+'NDBI_diss',j+'NDWI_diss',j+'EVI_diss',j+'RVI_diss']
    )}

function add_Bands(image1,image2){
  return image1.addBands(image2.select(".*"));
}

//OTSU
function otsu1(histogram) {
    // 各组频数
    var counts = ee.Array(ee.Dictionary(histogram).get('histogram'))
    // 各组的值
    var means = ee.Array(ee.Dictionary(histogram).get('bucketMeans'))
    // 组数
    var size = means.length().get([0])
    // 总像元数量
    var total = counts.reduce(ee.Reducer.sum(), [0]).get([0])
    // 所有组的值之和
    var sum = means.multiply(counts).reduce(ee.Reducer.sum(), [0]).get([0])
    // 整幅影像的均值
    var mean = sum.divide(total)
 
    // 与组数相同长度的索引
    var indices = ee.List.sequence(1, size)
    // 穷举法计算类内方差
    var bss = indices.map(function (i) {
        // 当 i = 1, aCounts = [counts[0]], 当 i = 2, aCounts = [counts[0], counts[1]] 
        //从i分割为两类A、B 计算A方差
        var aCounts = counts.slice(0, 0, i)
        var aCount = aCounts.reduce(ee.Reducer.sum(), [0]).get([0])
        var aMeans = means.slice(0, 0, i)
        // 类别A均值
        var aMean = aMeans.multiply(aCounts)
            .reduce(ee.Reducer.sum(), [0]).get([0])
            .divide(aCount)
 
        var bCount = total.subtract(aCount)
        // 类别B均值
        var bMean = sum.subtract(aCount.multiply(aMean)).divide(bCount)
        //类间方差公式
        return aCount.multiply(aMean.subtract(mean).pow(2)).add(
            bCount.multiply(bMean.subtract(mean).pow(2)))
    })
 
    //print('类间方差', ui.Chart.array.values(ee.Array(bss), 0, means))
 
    // 排序选出最适阈值
    return means
        .sort(bss)
        .get([-1])
}
function otsu(image) {
    var histogram = image.reduceRegion({
        reducer: ee.Reducer.histogram(1000, 0.01),// 自行修改合适的最大组数，最小组距
        geometry: table,
        scale: 30,
        bestEffort: true,
        // tileScale:16
    });
    //print("频数分布", histogram)
    return otsu1(histogram.get(histogram.keys().get(0)));
}




var roi = table;
//print(roi)
//"LANDSAT/LT05/C01/T1_SR" 'LANDSAT/LC08/C01/T1_SR'
var datasatall1 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
                  .filterBounds(roi)
                  .filterDate('2018-01-01','2018-12-31')
                  .map(cloudMaskL8)
                  .map(L8_ndvi)
                  .map(L8_ndwi)
                  .map(L8_ndbi)
                  .map(L8_evi)
                  .map(L8_rvi)
                  //.map(L8_glcm);
                  //.sort('CLOUD_COVER');
var imageall1 = datasatall1.median().clip(roi);
Map.addLayer(imageall1, {bands: ['B4', 'B3', 'B2'], min: 0, max: 1500}, 'Landsat8_2018',false);

var datasatall2 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
                  .filterBounds(roi)
                  .filterDate('2020-01-01','2020-12-31')
                  .map(cloudMaskL8)
                  .map(L8_ndvi)
                  .map(L8_ndwi)
                  .map(L8_ndbi)
                  .map(L8_evi)
                  .map(L8_rvi)
                  //.map(L8_glcm);
                  //.sort('CLOUD_COVER');
var imageall2 = datasatall2.median().clip(roi);
Map.addLayer(imageall2, {bands: ['B4', 'B3', 'B2'], min: 0, max: 1500}, 'Landsat8_2020',false);

//print(imageall2)

var imageall1_NDVI = imageall1.select('NDVI');
var imageall2_NDVI = imageall2.select('NDVI');
var cha_NDVI = (imageall2_NDVI.subtract(imageall1_NDVI)).abs();
//Map.addLayer(cha_NDVI, {min: -1, max: 1}, 'imageall1_NDVI');
//计算OTSU阈值 
var cha_NDVI_yuzhi = otsu(cha_NDVI)
//print("阈值", imageall_ed_yuzhi)
var cha_NDVI_result = cha_NDVI.lt(cha_NDVI_yuzhi)
//Map.addLayer(cha_NDVI_result.randomVisualizer(), "", "cha_NDVI_result");


var imageall1_NDWI = imageall1.select('NDWI');
var imageall2_NDWI = imageall2.select('NDWI');
var cha_NDWI = (imageall2_NDWI.subtract(imageall1_NDWI)).abs();
//Map.addLayer(cha_NDWI, {min: -1, max: 1}, 'imageall1_NDWI');
//计算OTSU阈值 
var cha_NDWI_yuzhi = otsu(cha_NDWI)
//print("阈值", imageall_ed_yuzhi)
var cha_NDWI_result = cha_NDWI.lt(cha_NDWI_yuzhi)
//Map.addLayer(cha_NDWI_result.randomVisualizer(), "", "cha_NDWI_result");


var imageall1_NDBI = imageall1.select('NDBI');
var imageall2_NDBI = imageall2.select('NDBI');
var cha_NDBI = (imageall2_NDBI.subtract(imageall1_NDBI)).abs();
//Map.addLayer(cha_NDBI, {min: -1, max: 1}, 'imageall1_NDBI');
//计算OTSU阈值 
var cha_NDBI_yuzhi = otsu(cha_NDBI)
//print("阈值", imageall_ed_yuzhi)
var cha_NDBI_result = cha_NDBI.lt(cha_NDBI_yuzhi)
//Map.addLayer(cha_NDBI_result.randomVisualizer(), "", "cha_NDBI_result");



var imageall1_B1 = imageall1.select('B1');var imageall1_B2 = imageall1.select('B2');
var imageall1_B3 = imageall1.select('B3');var imageall1_B4 = imageall1.select('B4');
var imageall1_B5 = imageall1.select('B5');var imageall1_B6 = imageall1.select('B6');
var imageall1_B7 = imageall1.select('B7');
var imageall2_B1 = imageall2.select('B1');var imageall2_B2 = imageall2.select('B2');
var imageall2_B3 = imageall2.select('B3');var imageall2_B4 = imageall2.select('B4');
var imageall2_B5 = imageall2.select('B5');var imageall2_B6 = imageall2.select('B6');
var imageall2_B7 = imageall2.select('B7');

// var imageall_ed = (((imageall2_B1.subtract(imageall1_B1)).multiply(imageall2_B1.subtract(imageall1_B1)))
//                   .add ((imageall2_B2.subtract(imageall1_B2)).multiply(imageall2_B2.subtract(imageall1_B2)))
//                   .add ((imageall2_B3.subtract(imageall1_B3)).multiply(imageall2_B3.subtract(imageall1_B3)))
//                   .add ((imageall2_B4.subtract(imageall1_B4)).multiply(imageall2_B4.subtract(imageall1_B4)))
//                   .add ((imageall2_B5.subtract(imageall1_B5)).multiply(imageall2_B5.subtract(imageall1_B5)))
//                   .add ((imageall2_B6.subtract(imageall1_B6)).multiply(imageall2_B6.subtract(imageall1_B6)))
//                   .add ((imageall2_B7.subtract(imageall1_B7)).multiply(imageall2_B7.subtract(imageall1_B7)))).sqrt();

var imageall_ed = (((imageall2_B1.subtract(imageall1_B1)).pow(2))
                  .add((imageall2_B2.subtract(imageall1_B2)).pow(2))
                  .add((imageall2_B3.subtract(imageall1_B3)).pow(2))
                  .add((imageall2_B4.subtract(imageall1_B4)).pow(2))
                  .add((imageall2_B5.subtract(imageall1_B5)).pow(2))
                  .add((imageall2_B6.subtract(imageall1_B6)).pow(2))
                  .add((imageall2_B7.subtract(imageall1_B7)).pow(2))).sqrt();
            
//Map.addLayer(imageall_ed, {min: 0, max: 1000}, 'imageall_ed');


// // calculate the min and max value of an image
// var minMax = te.reduceRegion({
//   reducer: ee.Reducer.minMax(),
//   geometry: roi,
//   scale: 30,
//   maxPixels: 10e9,
//   // tileScale: 16
// }); 
// // use unit scale to normalize the pixel values
// var unitScale = ee.ImageCollection.fromImages(
//   te.bandNames().map(function(name){
//     name = ee.String(name);
//     var band = te.select(name);
//     return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
//                 // eventually multiply by 100 to get range 0-100
//                 //.multiply(100);
// })).toBands().rename(te.bandNames());

// print(unitScale) 
// // add the the map
// Map.addLayer(unitScale, {min: 0, max: 1}, 'unitscaled')


//计算OTSU阈值 
var imageall_ed_yuzhi = otsu(imageall_ed)
//print("阈值", imageall_ed_yuzhi)
var imageall_ed_result = imageall_ed.lt(imageall_ed_yuzhi)
//Map.addLayer(imageall_ed_result.randomVisualizer(), "", "imageall_ed_result");



var imageall_sam1 = (imageall2_B1.multiply(imageall1_B1))
                   .add(imageall2_B2.multiply(imageall1_B2))
                   .add(imageall2_B3.multiply(imageall1_B3))
                   .add(imageall2_B4.multiply(imageall1_B4))
                   .add(imageall2_B5.multiply(imageall1_B5))
                   .add(imageall2_B6.multiply(imageall1_B6))
                   .add(imageall2_B7.multiply(imageall1_B7));
var imageall_sam2 = (((imageall1_B1.pow(2)).add((imageall1_B2.pow(2))).add((imageall1_B3.pow(2))).add((imageall1_B4.pow(2)))
                    .add((imageall1_B5.pow(2))).add((imageall1_B6.pow(2))).add((imageall1_B7.pow(2))))
                    .multiply((imageall2_B1.pow(2)).add((imageall2_B2.pow(2))).add((imageall2_B3.pow(2))).add((imageall2_B4.pow(2)))
                    .add((imageall2_B5.pow(2))).add((imageall2_B6.pow(2))).add((imageall2_B7.pow(2))))).sqrt();
var imageall_sam =  (imageall_sam1.divide(imageall_sam2)).acos();               

//Map.addLayer(imageall_sam, {min: 0, max: 1}, 'imageall_sam');

//计算OTSU阈值 
var imageall_sam_yuzhi = otsu(imageall_sam)
//print("阈值", imageall_sam_yuzhi)
var imageall_sam_result = imageall_sam.lt(imageall_sam_yuzhi)
//Map.addLayer(imageall_sam_result.randomVisualizer(), "", "imageall_sam_result");
//print(imageall_sam_result)

// 1=unchanged 0=changed
//var imageall_sam_vis = {min: 0, max: 1, palette: ['red','black'], opacity: 0.75};
//Map.addLayer(imageall_sam_result, imageall_sam_vis, 'imageall_sam_result');

//print(imageall_sam_result,'imageall_sam_result')
//ndvi ndwi ndbi sam unchanged area = 4
var imageall_result = imageall_sam_result.add(cha_NDBI_result).add(cha_NDWI_result).add(cha_NDVI_result);
//Map.addLayer(imageall_result.randomVisualizer(), "", "imageall_result");
//print(imageall_result)

var imageall_result_unchanged =  imageall_result.eq(4);
Map.addLayer(imageall_result_unchanged, "", "imageall_result_unchanged",false);
//print(imageall_result_unchanged)

// var imageall_result_unchanged_vis = {min: 0, max: 4, palette: ['black','red'], opacity: 0.75};
// //Map.addLayer(imageall_result_unchanged, imageall_result_unchanged_vis, 'imageall_result_unchanged');
// print(imageall_result_unchanged,'imageall_result_unchanged')
// Map.addLayer(imageall_result_unchanged.randomVisualizer(), "", "imageall_result_unchanged");


var point = table2;
//print(point);
var pointsize = point.toList(point.size());
// print(roi);
print(pointsize,'pointsize');

var longlat=ee.Image.pixelLonLat();
var pointsData = imageall_result_unchanged.addBands(longlat).reduceRegions({
  collection:point,
  reducer:ee.Reducer.mean(),
  scale:30,
  tileScale:16,
})
var pointsize2 = pointsData.toList(pointsData.size());
print(pointsize2,'pointsize');

var filter_1 = ee.Filter.eq('B1',1);
var result_filter = pointsData.filter(filter_1);
//var point_nochange= pointsData.filterMetadata('B1','equals','1');
//print(point_nochange)
//var pointsize2 = point_nochange.toList(point_nochange.size());
//print(pointsize2,'pointsize2');
//print(result_filter)



Export.table.toDrive({
  collection:result_filter,
  description: "unchange2018",
  fileNamePrefix: "unchange2018",
  fileFormat: "SHP"
});



// // for (var i = 0; i < 10; i++){
// // var t = ee.List(pointsize).get(i);
// // }
// //var feature = ee.Feature(point.map(t)).set('changetest', 'changetest') 
// //print(feature)
// // var aa=[];
// // for (var i = 0; i < 10; i++){
// // if(imageall_result_unchanged == 1){
// //   aa[i] = pointsize[i];
// //   print(aa[1],'d')
// // }
  
// // }
// // print(aa)



// // var aa=[];
// // var test=[];
// // for (var i = 0; i < 10; i++){
// //   var t = ee.List(pointsize).get(i);
// //   test[i]= ee.Algorithms.If(imageall_result.eq(1),t,0);
// //   //aa.push(test[i]);
// //   print(test);
// //   return test[i]
// // }

// // var list = ee.FeatureCollection(test.map(test));
// // print(aa);



// // test = pointList.map(function(list) {
// //   for (var i = 0; i <= list.length; i++) {
// //     if (imageall_result.eq(4)){
// //       return list[i];
// //     }
// //     else {
// //       return NULL;
// //     }
// //     return list;
// //   }
// // });
// // //var sd = pointList.map(test);
// // //list.removeALL([0])





















var roi = table;
//Map.addLayer(roi, {color: "black"}, "Shp");
//Map.centerObject(roi, 7);

function cloudMaskL8(image) {
  var cloudShadowBitMask = 1 << 3;  
  var cloudsBitMask = 1 << 5;
  var qa = image.select('pixel_qa');   
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0).and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  return image.updateMask(mask);}

function L8_ndvi(image){
  return image.addBands(image.normalizedDifference(['B5', 'B4']).rename("NDVI"));
}

function L8_ndwi(image){
  return image.addBands(image.normalizedDifference(['B3', 'B5']).rename('NDWI'));
} 

function L8_ndbi(image){
  return image.addBands(image.normalizedDifference(['B6', 'B5']).rename('NDBI'));
} 

function L8_rvi(image){
      
        var rvi = image.expression('NIR / Red', {
        'NIR': image.select('B5'),
        'Red': image.select('B4')
        }).float();
        return image.addBands(rvi.rename('RVI'));
    }

function L8_evi(image){
      var evi = image.expression('2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {
    'NIR' : image.select('B5'),
    'RED' : image.select('B4'),
    'BLUE': image.select('B2')
  }).float();
  return image.addBands(evi.rename('EVI'));
}

// function L8_glcm(image,j){
//   var iv = image.select('B1','B2','B3','B4','B5','B6','B7','NDVI','NDWI','NDBI','EVI','RVI').toUint16();
//   var glcm = iv.glcmTexture({size: 3});
//   return image.addBands(glcm.rename(j+'glcm'));
// }


function Band_rename(image,j){
  return image.select(
    ['B1','B2','B3','B4','B5','B6','B7','NDVI','NDWI','NDBI','EVI','RVI',
    'B1_contrast','B2_contrast','B3_contrast','B4_contrast','B5_contrast','B6_contrast','B7_contrast','NDVI_contrast','NDBI_contrast','NDWI_contrast','RVI_contrast','EVI_contrast',
    'B1_ent','B2_ent','B3_ent','B4_ent','B5_ent','B6_ent','B7_ent','NDVI_ent','NDBI_ent','NDWI_ent','EVI_ent','RVI_ent',
    'B1_corr','B2_corr','B3_corr','B4_corr','B5_corr','B6_corr','B7_corr','NDVI_corr','NDBI_corr','NDWI_corr','EVI_corr','RVI_corr',
    'B1_diss','B2_diss','B3_diss','B4_diss','B5_diss','B6_diss','B7_diss','NDVI_diss','NDBI_diss','NDWI_diss','EVI_diss','RVI_diss'],
    [j+'B1',j+'B2',j+'B3',j+'B4',j+'B5',j+'B6',j+'B7',j+'NDVI',j+'NDWI',j+'NDBI',j+'EVI',j+'RVI',
    j+'B1_contrast',j+'B2_contrast',j+'B3_contrast',j+'B4_contrast',j+'B5_contrast',j+'B6_contrast',j+'B7_contrast',j+'NDVI_contrast',j+'NDBI_contrast',j+'NDWI_contrast',j+'RVI_contrast',j+'EVI_contrast',
    j+'B1_ent',j+'B2_ent',j+'B3_ent',j+'B4_ent',j+'B5_ent',j+'B6_ent',j+'B7_ent',j+'NDVI_ent',j+'NDBI_ent',j+'NDWI_ent',j+'EVI_ent',j+'RVI_ent',
    j+'B1_corr',j+'B2_corr',j+'B3_corr',j+'B4_corr',j+'B5_corr',j+'B6_corr',j+'B7_corr',j+'NDVI_corr',j+'NDBI_corr',j+'NDWI_corr',j+'EVI_corr',j+'RVI_corr',
    j+'B1_diss',j+'B2_diss',j+'B3_diss',j+'B4_diss',j+'B5_diss',j+'B6_diss',j+'B7_diss',j+'NDVI_diss',j+'NDBI_diss',j+'NDWI_diss',j+'EVI_diss',j+'RVI_diss']
    )}

function add_Bands(image1,image2){
  return image1.addBands(image2.select(".*"));
}




//"LANDSAT/LT05/C01/T1_SR" 'LANDSAT/LC08/C01/T1_SR'
var datasat12 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
                  .filterBounds(roi)
                  .filterDate('2018-01-01','2018-02-28')
                  .map(cloudMaskL8)
                  .map(L8_ndvi)
                  .map(L8_ndwi)
                  .map(L8_ndbi)
                  .map(L8_evi)
                  .map(L8_rvi)
                  //.map(L8_glcm);
                  //.sort('CLOUD_COVER');
var image12 = datasat12.median().clip(roi);

var iv1 = image12.select('B1').toUint16();
var glcm12_B1 = iv1.glcmTexture({size: 3});
var image12 = add_Bands(image12,glcm12_B1);
var iv2 = image12.select('B2').toUint16();
var glcm12_B2 = iv2.glcmTexture({size: 3});
var image12 = add_Bands(image12,glcm12_B2);
var iv3 = image12.select('B3').toUint16();
var glcm12_B3 = iv3.glcmTexture({size: 3});
var image12 = add_Bands(image12,glcm12_B3);
var iv4 = image12.select('B4').toUint16();
var glcm12_B4 = iv4.glcmTexture({size: 3});
var image12 = add_Bands(image12,glcm12_B4);
var iv5 = image12.select('B5').toUint16();
var glcm12_B5 = iv5.glcmTexture({size: 3});
var image12 = add_Bands(image12,glcm12_B5);
var iv6 = image12.select('B6').toUint16();
var glcm12_B6 = iv6.glcmTexture({size: 3});
var image12 = add_Bands(image12,glcm12_B6);
var iv7 = image12.select('B7').toUint16();
var glcm12_B7 = iv7.glcmTexture({size: 3});
var image12 = add_Bands(image12,glcm12_B7);
var iv8 = image12.select('NDVI').toUint16();
var glcm12_NDVI = iv8.glcmTexture({size: 3});
var image12 = add_Bands(image12,glcm12_NDVI);
var iv9 = image12.select('NDWI').toUint16();
var glcm12_NDWI = iv9.glcmTexture({size: 3});
var image12 = add_Bands(image12,glcm12_NDWI);
var iv10 = image12.select('NDBI').toUint16();
var glcm12_NDBI = iv10.glcmTexture({size: 3});
var image12 = add_Bands(image12,glcm12_NDBI);
var iv11 = image12.select('EVI').toUint16();
var glcm12_EVI = iv11.glcmTexture({size: 3});
var image12 = add_Bands(image12,glcm12_EVI);
var iv12 = image12.select('RVI').toUint16();
var glcm12_RVI = iv12.glcmTexture({size: 3});
var image12 = add_Bands(image12,glcm12_RVI);



//"LANDSAT/LT05/C01/T1_SR" 'LANDSAT/LC08/C01/T1_SR'
var datasat39 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
                  .filterBounds(roi)
                  .filterDate('2018-03-01','2018-09-30')
                  .map(cloudMaskL8)
                  .map(L8_ndvi)
                  .map(L8_ndwi)
                  .map(L8_ndbi)
                  .map(L8_evi)
                  .map(L8_rvi);
                  //.sort('CLOUD_COVER');
var image39 = datasat39.median().clip(roi);

var iv1 = image39.select('B1').toUint16();
var glcm39_B1 = iv1.glcmTexture({size: 3});
var image39 = add_Bands(image39,glcm39_B1);
var iv2 = image39.select('B2').toUint16();
var glcm39_B2 = iv2.glcmTexture({size: 3});
var image39 = add_Bands(image39,glcm39_B2);
var iv3 = image39.select('B3').toUint16();
var glcm39_B3 = iv3.glcmTexture({size: 3});
var image39 = add_Bands(image39,glcm39_B3);
var iv4 = image39.select('B4').toUint16();
var glcm39_B4 = iv4.glcmTexture({size: 3});
var image39 = add_Bands(image39,glcm39_B4);
var iv5 = image39.select('B5').toUint16();
var glcm39_B5 = iv5.glcmTexture({size: 3});
var image39 = add_Bands(image39,glcm39_B5);
var iv6 = image39.select('B6').toUint16();
var glcm39_B6 = iv6.glcmTexture({size: 3});
var image39 = add_Bands(image39,glcm39_B6);
var iv7 = image39.select('B7').toUint16();
var glcm39_B7 = iv7.glcmTexture({size: 3});
var image39 = add_Bands(image39,glcm39_B7);
var iv8 = image39.select('NDVI').toUint16();
var glcm39_NDVI = iv8.glcmTexture({size: 3});
var image39 = add_Bands(image39,glcm39_NDVI);
var iv9 = image39.select('NDWI').toUint16();
var glcm39_NDWI = iv9.glcmTexture({size: 3});
var image39 = add_Bands(image39,glcm39_NDWI);
var iv10 = image39.select('NDBI').toUint16();
var glcm39_NDBI = iv10.glcmTexture({size: 3});
var image39 = add_Bands(image39,glcm39_NDBI);
var iv11 = image39.select('EVI').toUint16();
var glcm39_EVI = iv11.glcmTexture({size: 3});
var image39 = add_Bands(image39,glcm39_EVI);
var iv12 = image39.select('RVI').toUint16();
var glcm39_RVI = iv12.glcmTexture({size: 3});
var image39 = add_Bands(image39,glcm39_RVI);



//"LANDSAT/LT05/C01/T1_SR" 'LANDSAT/LC08/C01/T1_SR'
var datasat1012 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
                  .filterBounds(roi)
                  .filterDate('2018-10-01','2018-12-31')
                  .map(cloudMaskL8)
                  .map(L8_ndvi)
                  .map(L8_ndwi)
                  .map(L8_ndbi)
                  .map(L8_evi)
                  .map(L8_rvi);
                  //.sort('CLOUD_COVER');
var image1012 = datasat1012.median().clip(roi);

var iv1 = image1012.select('B1').toUint16();
var glcm1012_B1 = iv1.glcmTexture({size: 3});
var image1012 = add_Bands(image1012,glcm1012_B1);
var iv2 = image1012.select('B2').toUint16();
var glcm1012_B2 = iv2.glcmTexture({size: 3});
var image1012 = add_Bands(image1012,glcm1012_B2);
var iv3 = image1012.select('B3').toUint16();
var glcm1012_B3 = iv3.glcmTexture({size: 3});
var image1012 = add_Bands(image1012,glcm1012_B3);
var iv4 = image1012.select('B4').toUint16();
var glcm1012_B4 = iv4.glcmTexture({size: 3});
var image1012 = add_Bands(image1012,glcm1012_B4);
var iv5 = image1012.select('B5').toUint16();
var glcm1012_B5 = iv5.glcmTexture({size: 3});
var image1012 = add_Bands(image1012,glcm1012_B5);
var iv6 = image1012.select('B6').toUint16();
var glcm1012_B6 = iv6.glcmTexture({size: 3});
var image1012 = add_Bands(image1012,glcm1012_B6);
var iv7 = image1012.select('B7').toUint16();
var glcm1012_B7 = iv7.glcmTexture({size: 3});
var image1012 = add_Bands(image1012,glcm1012_B7);
var iv8 = image1012.select('NDVI').toUint16();
var glcm1012_NDVI = iv8.glcmTexture({size: 3});
var image1012 = add_Bands(image1012,glcm1012_NDVI);
var iv9 = image1012.select('NDWI').toUint16();
var glcm1012_NDWI = iv9.glcmTexture({size: 3});
var image1012 = add_Bands(image1012,glcm1012_NDWI);
var iv10 = image1012.select('NDBI').toUint16();
var glcm1012_NDBI = iv10.glcmTexture({size: 3});
var image1012 = add_Bands(image1012,glcm1012_NDBI);
var iv11 = image1012.select('EVI').toUint16();
var glcm1012_EVI = iv11.glcmTexture({size: 3});
var image1012 = add_Bands(image1012,glcm1012_EVI);
var iv12 = image1012.select('RVI').toUint16();
var glcm1012_RVI = iv12.glcmTexture({size: 3});
var image1012 = add_Bands(image1012,glcm1012_RVI);
print(image1012)

//"LANDSAT/LT05/C01/T1_SR" 'LANDSAT/LC08/C01/T1_SR'
var datasatall = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
                  .filterBounds(roi)
                  .filterDate('2018-01-01','2018-12-31')
                  .map(cloudMaskL8)
                  .map(L8_ndvi)
                  .map(L8_ndwi)
                  .map(L8_ndbi)
                  .map(L8_evi)
                  .map(L8_rvi);
                  //.sort('CLOUD_COVER');
var imageall = datasatall.median().clip(roi);


//Map.addLayer(classification_image, {bands: ['1B4', '1B3', '1B2'], min: 0, max: 1500}, 'Landsat8');
Map.addLayer(imageall, {bands: ['B4', 'B3', 'B2'], min: 0, max: 1500}, 'Landsat8');
Map.addLayer(result_filter,'','shp');
//var data_collection = datasat.filter(ee.Filter.calendarRange(1,1,"month")); 
//var Jan_Image = data_collection.median().clip(roi);
var image12 = Band_rename(image12,1);
var classification_image = image12;

//var data_collection = datasat.filter(ee.Filter.calendarRange(2,2,"month")); 
//var Feb_Image = data_collection.median().clip(roi);
var image39 = Band_rename(image39,2);
var classification_image = add_Bands(classification_image,image39);

//var data_collection = datasat.filter(ee.Filter.calendarRange(3,3,"month")); 
//var Mar_Image = data_collection.median().clip(roi);
var image1012 = Band_rename(image1012,3);
var classification_image = add_Bands(classification_image,image1012);

// var data_collection = datasat.filter(ee.Filter.calendarRange(4,4,"month")); 
// var Apr_Image = data_collection.median().clip(roi);
// var Apr_Image = Band_rename(Apr_Image,4);
// var classification_image = add_Bands(classification_image,Apr_Image);

// var data_collection = datasat.filter(ee.Filter.calendarRange(5,5,"month")); 
// var May_Image = data_collection.median().clip(roi);
// var May_Image = Band_rename(May_Image,5);
// var classification_image = add_Bands(classification_image,May_Image);

// var data_collection = datasat.filter(ee.Filter.calendarRange(6,6,"month")); 
// var Jun_Image = data_collection.median().clip(roi);
// var Jun_Image = Band_rename(Jun_Image,6);
// var classification_image = add_Bands(classification_image,Jun_Image);

// var data_collection = datasat.filter(ee.Filter.calendarRange(7,7,"month")); 
// var Jul_Image = data_collection.median().clip(roi);
// var Jul_Image = Band_rename(Jul_Image,7);
// var classification_image = add_Bands(classification_image,Jul_Image);

// var data_collection = datasat.filter(ee.Filter.calendarRange(8,8,"month")); 
// var Aug_Image = data_collection.median().clip(roi);
// var Aug_Image = Band_rename(Aug_Image,8);
// var classification_image = add_Bands(classification_image,Aug_Image);

// var data_collection = datasat.filter(ee.Filter.calendarRange(9,9,"month")); 
// var Sep_Image = data_collection.median().clip(roi);
// var Sep_Image = Band_rename(Sep_Image,9);
// var classification_image = add_Bands(classification_image,Sep_Image);

// var data_collection = datasat.filter(ee.Filter.calendarRange(10,10,"month")); 
// var Oct_Image = data_collection.median().clip(roi);
// var Oct_Image = Band_rename(Oct_Image,10);
// var classification_image = add_Bands(classification_image,Oct_Image);

// var data_collection = datasat.filter(ee.Filter.calendarRange(11,11,"month")); 
// var Nov_Image = data_collection.median().clip(roi);
// var Nov_Image = Band_rename(Nov_Image,11);
// var classification_image = add_Bands(classification_image,Nov_Image);

// var data_collection = datasat.filter(ee.Filter.calendarRange(12,12,"month")); 
// var Dec_Image = data_collection.median().clip(roi);
// var Dec_Image = Band_rename(Dec_Image,12);
// var classification_image = add_Bands(classification_image,Dec_Image);

var a = 10;//seeds
var b = 10;//size
var c = 20;//compactness
var d = 8;//connectivity
var e = 40;//neigborhoodsize


// var seedGrid_1=ee.Algorithms.Image.Segmentation.seedGrid(10);
// var seedGrid_2=ee.Algorithms.Image.Segmentation.seedGrid(20);
// var seedGrid_3=ee.Algorithms.Image.Segmentation.seedGrid(30);
// var seeds=ee.ImageCollection([seedGrid_3,seedGrid_2,seedGrid_1]).mosaic()



//设置种子
var seeds = ee.Algorithms.Image.Segmentation.seedGrid(a);
var snic = ee.Algorithms.Image.Segmentation.SNIC({
  image: classification_image, 
  size: b,
  compactness: c,
  connectivity: d,
  neighborhoodSize:e,
  seeds: seeds
}).select(['1B1_mean', '1B2_mean', '1B3_mean', '1B4_mean', '1B5_mean', '1B6_mean', '1B7_mean', 
          '1NDVI_mean','1EVI_mean','1RVI_mean','1NDWI_mean', '1NDBI_mean',
          '2B1_mean', '2B2_mean', '2B3_mean', '2B4_mean', '2B5_mean', '2B6_mean', '2B7_mean', 
          '2NDVI_mean','2EVI_mean','2RVI_mean','2NDWI_mean', '2NDBI_mean', 
          '3B1_mean', '3B2_mean', '3B3_mean', '3B4_mean', '3B5_mean', '3B6_mean', '3B7_mean', 
          '3NDVI_mean','3EVI_mean','3RVI_mean','3NDWI_mean', '3NDBI_mean', 
          '1B1_contrast_mean', '1B2_contrast_mean','1B3_contrast_mean','1B4_contrast_mean','1B5_contrast_mean','1B6_contrast_mean','1B7_contrast_mean','1NDVI_contrast_mean','1EVI_contrast_mean','1RVI_contrast_mean','1NDWI_contrast_mean','1NDBI_contrast_mean',
          '2B1_contrast_mean', '2B2_contrast_mean','2B3_contrast_mean','2B4_contrast_mean','2B5_contrast_mean','2B6_contrast_mean','2B7_contrast_mean','2NDVI_contrast_mean','2EVI_contrast_mean','2RVI_contrast_mean','2NDWI_contrast_mean','2NDBI_contrast_mean',
          '3B1_contrast_mean', '3B2_contrast_mean','3B3_contrast_mean','3B4_contrast_mean','3B5_contrast_mean','3B6_contrast_mean','3B7_contrast_mean','3NDVI_contrast_mean','3EVI_contrast_mean','3RVI_contrast_mean','3NDWI_contrast_mean','3NDBI_contrast_mean',
          '1B1_ent_mean','1B2_ent_mean','1B3_ent_mean','1B4_ent_mean','1B5_ent_mean','1B6_ent_mean','1B7_ent_mean','1NDVI_ent_mean','1NDBI_ent_mean','1NDWI_ent_mean','1EVI_ent_mean','1RVI_ent_mean',
          '2B1_ent_mean','2B2_ent_mean','2B3_ent_mean','2B4_ent_mean','2B5_ent_mean','2B6_ent_mean','2B7_ent_mean','2NDVI_ent_mean','2NDBI_ent_mean','2NDWI_ent_mean','2EVI_ent_mean','2RVI_ent_mean',
          '3B1_ent_mean','3B2_ent_mean','3B3_ent_mean','3B4_ent_mean','3B5_ent_mean','3B6_ent_mean','3B7_ent_mean','3NDVI_ent_mean','3NDBI_ent_mean','3NDWI_ent_mean','3EVI_ent_mean','3RVI_ent_mean',
          '1B1_corr_mean','1B2_corr_mean','1B3_corr_mean','1B4_corr_mean','1B5_corr_mean','1B6_corr_mean','1B7_corr_mean','1NDVI_corr_mean','1NDBI_corr_mean','1NDWI_corr_mean','1EVI_corr_mean','1RVI_corr_mean',
          '2B1_corr_mean','2B2_corr_mean','2B3_corr_mean','2B4_corr_mean','2B5_corr_mean','2B6_corr_mean','2B7_corr_mean','2NDVI_corr_mean','2NDBI_corr_mean','2NDWI_corr_mean','2EVI_corr_mean','2RVI_corr_mean',
          '3B1_corr_mean','3B2_corr_mean','3B3_corr_mean','3B4_corr_mean','3B5_corr_mean','3B6_corr_mean','3B7_corr_mean','3NDVI_corr_mean','3NDBI_corr_mean','3NDWI_corr_mean','3EVI_corr_mean','3RVI_corr_mean',
          '1B1_diss_mean','1B2_diss_mean','1B3_diss_mean','1B4_diss_mean','1B5_diss_mean','1B6_diss_mean','1B7_diss_mean','1NDVI_diss_mean','1NDBI_diss_mean','1NDWI_diss_mean','1EVI_diss_mean','1RVI_diss_mean',
          '2B1_diss_mean','2B2_diss_mean','2B3_diss_mean','2B4_diss_mean','2B5_diss_mean','2B6_diss_mean','2B7_diss_mean','2NDVI_diss_mean','2NDBI_diss_mean','2NDWI_diss_mean','2EVI_diss_mean','2RVI_diss_mean',
          '3B1_diss_mean','3B2_diss_mean','3B3_diss_mean','3B4_diss_mean','3B5_diss_mean','3B6_diss_mean','3B7_diss_mean','3NDVI_diss_mean','3NDBI_diss_mean','3NDWI_diss_mean','3EVI_diss_mean','3RVI_diss_mean',
          'clusters'], ['1B1', '1B2','1B3','1B4','1B5','1B6','1B7','1NDVI','1EVI','1RVI','1NDWI','1NDBI',
          '2B1', '2B2','2B3','2B4','2B5','2B6','2B7','2NDVI','2EVI','2RVI','2NDWI','2NDBI',
          '3B1', '3B2','3B3','3B4','3B5','3B6','3B7','3NDVI','3EVI','3RVI','3NDWI','3NDBI',
          '1B1_contrast', '1B2_contrast','1B3_contrast','1B4_contrast','1B5_contrast','1B6_contrast','1B7_contrast','1NDVI_contrast','1EVI_contrast','1RVI_contrast','1NDWI_contrast','1NDBI_contrast',
          '2B1_contrast', '2B2_contrast','2B3_contrast','2B4_contrast','2B5_contrast','2B6_contrast','2B7_contrast','2NDVI_contrast','2EVI_contrast','2RVI_contrast','2NDWI_contrast','2NDBI_contrast',
          '3B1_contrast', '3B2_contrast','3B3_contrast','3B4_contrast','3B5_contrast','3B6_contrast','3B7_contrast','3NDVI_contrast','3EVI_contrast','3RVI_contrast','3NDWI_contrast','3NDBI_contrast',
          '1B1_ent','1B2_ent','1B3_ent','1B4_ent','1B5_ent','1B6_ent','1B7_ent','1NDVI_ent','1NDBI_ent','1NDWI_ent','1EVI_ent','1RVI_ent',
          '2B1_ent','2B2_ent','2B3_ent','2B4_ent','2B5_ent','2B6_ent','2B7_ent','2NDVI_ent','2NDBI_ent','2NDWI_ent','2EVI_ent','2RVI_ent',
          '3B1_ent','3B2_ent','3B3_ent','3B4_ent','3B5_ent','3B6_ent','3B7_ent','3NDVI_ent','3NDBI_ent','3NDWI_ent','3EVI_ent','3RVI_ent',
          '1B1_corr','1B2_corr','1B3_corr','1B4_corr','1B5_corr','1B6_corr','1B7_corr','1NDVI_corr','1NDBI_corr','1NDWI_corr','1EVI_corr','1RVI_corr',
          '2B1_corr','2B2_corr','2B3_corr','2B4_corr','2B5_corr','2B6_corr','2B7_corr','2NDVI_corr','2NDBI_corr','2NDWI_corr','2EVI_corr','2RVI_corr',
          '3B1_corr','3B2_corr','3B3_corr','3B4_corr','3B5_corr','3B6_corr','3B7_corr','3NDVI_corr','3NDBI_corr','3NDWI_corr','3EVI_corr','3RVI_corr',
          '1B1_diss','1B2_diss','1B3_diss','1B4_diss','1B5_diss','1B6_diss','1B7_diss','1NDVI_diss','1NDBI_diss','1NDWI_diss','1EVI_diss','1RVI_diss',
          '2B1_diss','2B2_diss','2B3_diss','2B4_diss','2B5_diss','2B6_diss','2B7_diss','2NDVI_diss','2NDBI_diss','2NDWI_diss','2EVI_diss','2RVI_diss',
          '3B1_diss','3B2_diss','3B3_diss','3B4_diss','3B5_diss','3B6_diss','3B7_diss','3NDVI_diss','3NDBI_diss','3NDWI_diss','3EVI_diss','3RVI_diss',
          'clusters'])


//clusters就是分割得到的一个个对象
var clusters = snic.select('clusters')
Map.addLayer(clusters.randomVisualizer(), {}, 'clusters', false)
//Map.addLayer(snic, {bands: ['B4', 'B3', 'B2'], min:0, max:1, gamma: 0.8}, 'means', false)

 
//计算每个对象的 stdDev.
var stdDev = classification_image.addBands(clusters).reduceConnectedComponents(ee.Reducer.stdDev(), 'clusters', 256)
//Map.addLayer(stdDev, {min:0, max:0.1}, 'StdDev', false)
 
var area = ee.Image.pixelArea().addBands(clusters).reduceConnectedComponents(ee.Reducer.sum(), 'clusters', 256)
var area = area.rename('area');
//Map.addLayer(area, {min:50000, max: 500000}, 'Cluster Area', false)
 
var minMax = clusters.reduceNeighborhood(ee.Reducer.minMax(), ee.Kernel.square(1));
var perimeterPixels = minMax.select(0).neq(minMax.select(1)).rename('perimeter');
//Map.addLayer(perimeterPixels, {min: 0, max: 1}, 'perimeterPixels');
 
var perimeter = perimeterPixels.addBands(clusters)
    .reduceConnectedComponents(ee.Reducer.sum(), 'clusters', 256);
//Map.addLayer(perimeter, {min: 100, max: 400}, 'Perimeter size', false);
 
var sizes = ee.Image.pixelLonLat().addBands(clusters).reduceConnectedComponents(ee.Reducer.minMax(), 'clusters', 256)
var width = sizes.select('longitude_max').subtract(sizes.select('longitude_min')).rename('width')
var height = sizes.select('latitude_max').subtract(sizes.select('latitude_min')).rename('height')
//Map.addLayer(width, {min:0, max:0.02}, 'Cluster width', false)
//Map.addLayer(height, {min:0, max:0.02}, 'Cluster height', false)
 

// var training_samples = training_sample;
// var testing_samples = testing_sample;

//var snicc = snic.select(stdDev);



// var classification_image = classification_image.addBands(area2).addBands(width2).addBands(perimeter2).addBands(height2);
// //.addBands(area1).addBands(width1).addBands(perimeter1).addBands(height1).
// //addBands(area3).addBands(width3).addBands(perimeter3).addBands(height3);

// print(classification_image)

var bands = [
            '1B1','1B2','1B3','1B4','1B5','1B6','1B7','1NDVI','1NDWI','1NDBI','1EVI','1RVI',
            '2B1','2B2','2B3','2B4','2B5','2B6','2B7','2NDVI','2NDWI','2NDBI','2EVI','2RVI',
            '3B1','3B2','3B3','3B4','3B5','3B6','3B7','3NDVI','3NDWI','3NDBI','3EVI','3RVI',
            '1B1_contrast', '1B2_contrast','1B3_contrast','1B4_contrast','1B5_contrast','1B6_contrast','1B7_contrast','1NDVI_contrast','1EVI_contrast','1RVI_contrast','1NDWI_contrast','1NDBI_contrast',
            '2B1_contrast', '2B2_contrast','2B3_contrast','2B4_contrast','2B5_contrast','2B6_contrast','2B7_contrast','2NDVI_contrast','2EVI_contrast','2RVI_contrast','2NDWI_contrast','2NDBI_contrast',
            '3B1_contrast', '3B2_contrast','3B3_contrast','3B4_contrast','3B5_contrast','3B6_contrast','3B7_contrast','3NDVI_contrast','3EVI_contrast','3RVI_contrast','3NDWI_contrast','3NDBI_contrast',
            '1B1_ent','1B2_ent','1B3_ent','1B4_ent','1B5_ent','1B6_ent','1B7_ent','1NDVI_ent','1NDBI_ent','1NDWI_ent','1EVI_ent','1RVI_ent',
            '2B1_ent','2B2_ent','2B3_ent','2B4_ent','2B5_ent','2B6_ent','2B7_ent','2NDVI_ent','2NDBI_ent','2NDWI_ent','2EVI_ent','2RVI_ent',
            '3B1_ent','3B2_ent','3B3_ent','3B4_ent','3B5_ent','3B6_ent','3B7_ent','3NDVI_ent','3NDBI_ent','3NDWI_ent','3EVI_ent','3RVI_ent',
            '1B1_corr','1B2_corr','1B3_corr','1B4_corr','1B5_corr','1B6_corr','1B7_corr','1NDVI_corr','1NDBI_corr','1NDWI_corr','1EVI_corr','1RVI_corr',
            '2B1_corr','2B2_corr','2B3_corr','2B4_corr','2B5_corr','2B6_corr','2B7_corr','2NDVI_corr','2NDBI_corr','2NDWI_corr','2EVI_corr','2RVI_corr',
            '3B1_corr','3B2_corr','3B3_corr','3B4_corr','3B5_corr','3B6_corr','3B7_corr','3NDVI_corr','3NDBI_corr','3NDWI_corr','3EVI_corr','3RVI_corr',
            '1B1_diss','1B2_diss','1B3_diss','1B4_diss','1B5_diss','1B6_diss','1B7_diss','1NDVI_diss','1NDBI_diss','1NDWI_diss','1EVI_diss','1RVI_diss',
            '2B1_diss','2B2_diss','2B3_diss','2B4_diss','2B5_diss','2B6_diss','2B7_diss','2NDVI_diss','2NDBI_diss','2NDWI_diss','2EVI_diss','2RVI_diss',
            '3B1_diss','3B2_diss','3B3_diss','3B4_diss','3B5_diss','3B6_diss','3B7_diss','3NDVI_diss','3NDBI_diss','3NDWI_diss','3EVI_diss','3RVI_diss',
            // '4B1','4B2','4B3','4B4','4B5','4B6','4B7','4NDVI','4NDWI','4NDBI','4EVI','4RVI',
            // '5B1','5B2','5B3','5B4','5B5','5B6','5B7','5NDVI','5NDWI','5NDBI','5EVI','5RVI',
            // '6B1','6B2','6B3','6B4','6B5','6B6','6B7','6NDVI','6NDWI','6NDBI','6EVI','6RVI',
            // '7B1','7B2','7B3','7B4','7B5','7B6','7B7','7NDVI','7NDWI','7NDBI','7EVI','7RVI',
            // '8B1','8B2','8B3','8B4','8B5','8B6','8B7','8NDVI','8NDWI','8NDBI','8EVI','8RVI',
            // '9B1','9B2','9B3','9B4','9B5','9B6','9B7','9NDVI','9NDWI','9NDBI','9EVI','9RVI',
            // '10B1','10B2','10B3','10B4','10B5','10B6','10B7','10NDVI','10NDWI','10NDBI','10EVI','10RVI',
            // '11B1','11B2','11B3','11B4','11B5','11B6','11B7','11NDVI','11NDWI','11NDBI','11EVI','11RVI',
            // '12B1','12B2','12B3','12B4','12B5','12B6','12B7','12NDVI','12NDWI','12NDBI','12EVI','12RVI',
            //'area','perimeter','height','width',
            //'area2','perimeter2','height2','width2',
            //'area3','perimeter3','height3','width3',
            //'stdDev',
            ];
            
            
// //分类器参数设置，选择分类依据：包括了area，width等
var classification_image = ee.Image.cat([
  snic.select(bands),
  //stdDev,
  area,
  perimeter,
  width,
  height
]).float();
print(classification_image)

// var points=ee.FeatureCollection(senlin);
// var training_samples = points.merge(gengdi).merge(renzao).merge(caodi).merge(shuiti).merge(guanmu).merge(luodi).merge(shidi).merge(bingchuan);

// var points2=ee.FeatureCollection(senlin);
// var testing_samples = points2.merge(gengdi).merge(renzao).merge(caodi).merge(shuiti).merge(guanmu).merge(luodi).merge(shidi);

var testing_samples = result_filter;

var training = classification_image.select(bands).sampleRegions({
  collection: testing_samples,
  properties: ['landcover'],
  scale: 30,
  tileScale: 16
});
// var testing = classification_image.select(bands).sampleRegions({
//   collection: testing_samples,
//   properties: ['landcover'],
//   scale: 30,
//   tileScale: 16
// });

var withRandom = training.randomColumn('random');//样本点随机的排列
var split = 0.7; 
var trainingPartition = withRandom.filter(ee.Filter.lt('random', split));//筛选70%的样本作为训练样本
var testingPartition = withRandom.filter(ee.Filter.gte('random', split));//筛选30%的样本作为测试样本
var classProperty = 'landcover';

//var trainingPartition = training;
//var testingPartition = testing;
Export.table.toDrive({
  collection:testingPartition,
  description: "test2018_5919",
  fileNamePrefix: "test2018_5919",
  fileFormat: "SHP"
});

var rf_classifier = ee.Classifier.smileRandomForest(1000).train({
  features: trainingPartition,
  classProperty: 'landcover',
  inputProperties: bands
});


var rf_classified = classification_image.select(bands).classify(rf_classifier);
Map.addLayer(rf_classified,{min: 0, max: 7, palette: ['#FAA0FF','#006400','#64FF00','#ffc82d','#0064FF','#0000FF','#FA0000','#BEBEBE']},'rf',false);
//print('rf_classified',rf_classified)
//print(rf_classifier.explain(),'rf_properties');

var test = testingPartition.classify(rf_classifier);
var confusionMatrix = test.errorMatrix('landcover', 'classification');
print('confusionMatrix',confusionMatrix);
print('overall accuracy', confusionMatrix.accuracy());
print('kappa accuracy', confusionMatrix.kappa());


// var rf_test = testingPartition.classify(rf_classifier);
// var rf_confusionMatrix = rf_test.errorMatrix('landcover', 'classification');
// print('rf_overall accuracy', rf_confusionMatrix.accuracy());
// print('rf_kappa accuracy', rf_confusionMatrix.kappa());


// // 影像领域均值平滑处理
// smooth = image.reduceNeighborhood({
//     'reducer':ee.Reducer.mean(),
//     'kernel':ee.Kernel.square(3)
// }
// )
// Map.addLayer(smooth, {'min':0, 'max':3000}, 'smooth dem')
// Map.addLayer(ee.Terrain.hillshade(smooth), {}, 'smooth hillshade')



//影像平滑
//var rf_cla_smooth = rf_classified.focal_mode(3,'octagon','pixels').clip(roi);//平滑图像
//Map.addLayer(rf_cla_smooth,{min: 0, max: 7, palette: ['#FAA0FF','#006400','#64FF00','#ffc82d','#0064FF','#0000FF','#FA0000','#BEBEBE']},'rf_end');


// var areaDict = rf_cla_smooth.eq(6).reduceRegion({
//                         reducer: ee.Reducer.sum(),
//                         geometry: roi,
//                         scale: 30,
//                         maxPixels: 1e13,
//                         tileScale: 16
//                       });
// print(areaDict);




Export.image.toDrive({
  image: rf_classified.clip(table),
      //image: composite.clip(table), 
    // image: composite.clip(table),
      description: 'miandian2018_5919',
      scale: 30,
      maxPixels:100000000000,
    // crs:'WGS84',
      region: table.geometry()
    });
//Export.table.toDrive({
      //collection : renzao,
      //description: 'roirenzao',
      //fileFormat:'SHP'
    //});

